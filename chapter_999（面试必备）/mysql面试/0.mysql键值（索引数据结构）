key——键值类型：
index           普通索引
unique          唯一索引
primary key     主键
foreign key     外键

操作系统：
磁盘预读：
内存和磁盘交互时有一个最小的逻辑单位：页。一般为4k,8k,16k在进行数据读取时，一般会读取页的整数倍
innodb存储引擎在进行数据加载时候读取的是16kb的数据

索引：类似于书的目录，对表中字段进行排序
索引作用：提高查询效率
索引存储位置：磁盘，读取数据时会把数据读取到内存中
索引存储格式：key——value
索引数据结构：Btree B+tree hashmap 二叉树 红黑树 avl树

hash表：
需要较好的哈希算法，哈希函数可能对不同的 key 会计算出同一个结果，
导致hash碰撞，数据散列不均匀。
对于mysql的范围查找    select * from user where id >3;
hash算法是无序的，需要把所有数据加载到内存再进行范围查找和筛选，过于笨重，低效
ps:MEMORY引擎使用hash算法，innodb引擎使用自适应hash

bst二叉查找树：
二叉树的叶子节点都是按序排列的，从左到右依次升序排列
对于mysql的范围查找    select * from user where id >3;
只需要取出节点为4及其右子树即可，容易实现范围查找
缺点：一直插入比父节点大/小的左/右子树，此时二叉查找树退化为线性链表，查找效率急剧退化

红黑树：（平衡二叉树）
根节点为黑色，子节点为红色
通过子节点的自动旋转和调整，让二叉树始终保持基本平衡的状态，保持二叉树的查找效率，红黑树能够以O(log2(N))的时间复杂度进行搜索、插入、删除操作
缺点：一直插入比父节点大/小的左/右子树，此时红黑树会右倾/左倾，查找效率退化为O（n）

AVL树：（完全平衡二叉树）
它是一棵空树或它的左右两个子树的高度差的绝对值不超过1（-1，0，1），并且左右两个子树都是一棵平衡二叉树。
效率比红黑树更高
缺点：每个树节点只存储一个数据，需要大量进行IO的读写，耗时

二叉树、bst、红黑树、AVL树共同缺陷：
需要插入大量数据时，会让树变得很高，由于一个节点存储一个数据，所以需要大量的IO

Btree：
每个节点可以根据树的度存储更多数据

MySQL选择 B+tree 原因：（多路平衡查找树）
B+树节点存储的是索引，在单个节点存储容量有限的情况下，单节点也能存储大量索引，使得整个 B+树高度降低，减少了磁盘 IO。
B+树的叶子节点是真正数据存储的地方，叶子节点用了链表连接起来，这个链表本身就是有序的，在数据范围查找时，更具备效率。
因此 Mysql 的索引用的就是 B+树，B+树在查找效率、范围查找中都有着非常不错的性能。