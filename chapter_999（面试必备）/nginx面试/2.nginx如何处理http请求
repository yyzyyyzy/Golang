它结合多进程机制（单线程）和异步非阻塞方式。
1、多进程机制（单线程）
服务器每当收到一个客户端请求时，就有服务器主进程生成一个子进程（ worker process ）
出来和客户端建立连接进行交互，直到连接断开，该子进程就结束了。

2、异步非阻塞机制
每个工作进程使用异步非阻塞方式 ，可以处理多个客户端请求。运用了epoll模型，提供了一个队列，排队解决。
当某个工作进程接收到客户端的请求以后，调用IO进行处理，如果不能立即得到结果，
就去处理其他请求（即为 非阻塞 ）；而客户端在此期间也无需等待响应，可以去处理其他事情（即为异步）。
当IO返回时，就会通知此工作进程 ；该进程得到通知，暂时挂起当前处理的事务去响应客户端请求。


为什么 Nginx 不使用多线程？

Apache: 创建多个进程或线程，而每个进程或线程都会为其分配 cpu 和内存
（线程要比进程小的多，所以 worker 支持比 perfork 高的并发），并发过大会榨干服务器资源。
Nginx: 采用单线程来异步非阻塞处理请求（管理员可以配置 Nginx 主进程的工作进程的数量）(epoll)，
不会为每个请求分配 cpu 和内存资源，节省了大量资源，同时也减少了大量的 CPU 的上下文切换。
所以才使得 Nginx 支持更高的并发。