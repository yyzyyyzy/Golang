负载均衡算法：
1.DNS轮询算法
2.weight权重算法
3.ip_hash依据IP哈希算法
4.least_conn依据最少的连接算法
5.URL_hash依据URL哈希算法
6.fair依据响应时间

1.DNS轮询算法（weight=1的权重算法）
按照时间顺序进行访问

2.weight权重算法
server 192.168.158.129:9001 weight=2;
server 192.168.158.129:9002 weight=3;
server 192.168.158.129:9003 weight=4;
权重越大，被分配到指令的概率越大

3.ip_hash依据IP哈希算法：
ip_hash;
server 192.168.158.129:9001;
server 192.168.158.129:9002;
server 192.168.158.129:9003;

通过哈希算法，客户端的请求通过哈希算法将session等信息永远发往同一台服务器
负载不均衡，某些服务器请求量过大，不建议使用

4.least_conn依据最少的连接算法
least_conn;
server 192.168.158.129:9001;
server 192.168.158.129:9002;
server 192.168.158.129:9003;

服务器1处理一个请求1s
服务器2处理一个请求10ms
least_conn算法适合处理请求时间长短不一的情况

5.URL_hash依据URL哈希算法
hash $request_url;
server 192.168.158.129:9001;
server 192.168.158.129:9002;
server 192.168.158.129:9003;

通过哈希算法，客户端的请求通过哈希算法将文件的URL永远发往同一台服务器

6.fair依据响应时间
fair;
server 192.168.158.129:9001;
server 192.168.158.129:9002;
server 192.168.158.129:9003;

需要添加模块nginx-upsteam-fair
根据响应时间智能选择服务器进行访问
