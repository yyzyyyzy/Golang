哨兵模式，就是在原来的主从架构的基础上，又搞了一个集群，哨兵集群.
这个集群会监控redis集群的主节点和从节点的状态，如果发现主节点挂了，就会重新在从节点中选出来一个作为主节点，从而做到高可用。

哨兵原理可以理解为三个步骤：监控、通知、故障转移
①监控：
哨兵集群中的每个节点都会启动三个定时任务

第一个定时任务： 每个sentinel节点每隔1s向所有的master、slaver、别的sentinel节点发送一个PING命令，
              作用：心跳检测
第二个定时任务： 每个sentinel每隔2s都会向master的__sentinel__:hello这个channel中发送自己掌握的集群信息和自己的一些信息（比如host,ip,run id），
              这个是利用redis的pub/sub功能，每个sentinel节点都会订阅这个channel，也就是说，每个sentinel节点都可以知道别的sentinel节点掌握的集群信息，
              作用：信息交换，了解别的sentinel的信息和他们对于主节点的判断
第三个定时任务： 每个sentinel节点每隔10s都会向master和slaver发送INFO命令，
              作用：发现最新的集群拓扑结构


②通知
通知
配置完成就会进行监控，并发送PING命令。

当超过指定的时间后，如果被PING的数据库或节点没有进行回复，哨兵认为主观下线。

主观下线表示从当前的哨兵进程来看，该节点已经下线。
如果该节点为主数据库，则哨兵进行下一步判断是否进行故障恢复：
    哨兵发送sentinel is-master-down-by-addr命令通知其他哨兵节点，说：我发现这个地址的主数据库下线了，你们来看看是不是下线了，
    当指定达到指定数量的哨兵也认为主数据库下线了，那么哨兵就认为这是客观下线。


③故障转移
哨兵确定主数据库下线之后，会进行内部投票，选出一个领头羊，故障恢复就由这个选出的领头羊来操作，领头羊的选举有如下过程：

1）发现主数据库客观下线的哨兵节点（A节点）向每个哨兵节点发送命令，要求对方选自己成为新的领头哨兵

2）如果目标哨兵节点没有选择过其他哨兵，则同意A成为领头哨兵

3）如果A节点发现有超过半数且超过quorum参数值的哨兵节点同意自己成为领头羊哨兵，那么A成功成为领头羊哨兵

选出一个从数据库后，领头羊哨兵向从数据库发送replicaof no one命令使其升级为主数据库。
而领头羊向其他从数据库发送repliaof命令使其成为新主数据库的从数据库。最后进行更新内部记录，将已经停止服务的旧主数据库更新为新的从数据库身份继续服务。