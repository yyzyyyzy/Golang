1.HTTP封装、路由映射表、静态路由实现（只要传入任何实现了 ServerHTTP 接口的实例，所有的HTTP请求，就都交给了该实例处理了）
    1.http.ListenAndServe(":9999", nil)
       第一个参数是 地址，:9999表示在 9999 端口监听。
       第二个参数是 代表处理所有的HTTP请求的实例，handler 是一个接口，只要实现了 ServerHTTP 接口的实例，所有的HTTP请求，就都交给了该实例处理了。

    2.func (e *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) { ... }
       我们定义了一个空的结构体Engine，实现了方法ServeHTTP，这个方法有2个参数
       第一个参数是 ResponseWriter接口 ，利用 ResponseWriter 可以构造针对该请求的响应,
       第二个参数是 Request结构体，该对象包含了该HTTP请求的所有的信息，比如请求地址、Header和Body等信息，使用指针是可以节省空间

    3.HandlerFunc用来提供给用户使用，用来定义路由映射的处理方法

    4.Engine结构体中router为路由映射表，key为请求方法和静态路由，value为用户映射的处理方法HandlerFunc

2.独立路由模块、用Context封装请求和响应（*http.Request 和 http.ResponseWriter提供的接口粒度太细，需要构造一个高效的HTTP响应）
    1.Context封装 *http.Request 和 http.ResponseWriter，对 Method 和 Path 这两个常用属性可以直接访问

    2.map[string]interface{}起别名为H，简化代码

    3.提供了访问Query和PostForm参数的方法

    4.提供了快速构造String/Data/JSON/HTML响应的方法

    5.将和路由相关的方法和结构提取了出来，方便扩展动态路由等功能

3.前缀树实现动态路由、路由模块和Context模块重构（解析对应的动态路由，每一个节点的所有的子节点都拥有相同的前缀。这种结构非常适用于路由匹配）
    1.前缀树动态路由：例如/h/name/age/这个路由，第一层结点精准匹配到了h，第二层结点模糊匹配到了:lzk，那么会把lzk参数赋值为name,继续下一层匹配

    2.前缀树算法：
        1.插入：递归查找每一层的节点，如果没有匹配到当前part的节点，则新建一个
        2.搜索：递归查询每一层的节点，退出规则是，匹配到了*，或者匹配到了第len(parts)层节点，匹配失败

    3.在 HandlerFunc 中，希望能够访问到解析的参数，因此，需要对 Context 对象增加一个属性和方法，来提供对路由参数的访问

    4.我们将解析后的参数存储到Params中，通过c.Param("name")的方式获取到对应的值。

4.路由分组
    Restful API ：
    以/post开头的路由匿名可访问。
    以/admin开头的路由需要鉴权。
    以/api开头的路由是 RESTful 接口，可以对接第三方平台，需要三方平台鉴权。

    1.RouterGroup对象使用分组嵌套的设计方案，将Engine作为顶层的分组，同时RouterGroup也可以访问Engine.Router

    2.分组后不同分组可以使用不同的中间件：例如/admin的分组，可以应用鉴权中间件；/分组应用日志中间件

5.中间件的扩展
    1.中间件处理的输入是Context对象，插入点是：框架接收到请求初始化Context对象后，允许用户使用自己定义的中间件做一些额外的处理，例如记录日志等

    2.调用(*Context).Next()函数，中间件可等待用户自己定义的 Handler处理结束后，再做一些额外的操作，例如计算本次处理所用时间等

    3.不是所有的handler都会调用Next方法，需要通过手动调用Next方法，用于在请求前后各实现一些行为，如果中间件只作用于请求前，可以省略调用Next()

6.异常处理
    1.错误处理也可以作为一个中间件