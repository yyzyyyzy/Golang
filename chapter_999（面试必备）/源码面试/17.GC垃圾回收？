栈上的数据会随着函数调用栈的销毁消失，而堆上的数据需要主动释放。
自动垃圾回收：虚拟空间上，程序能够用到的数据都是可以从根节点上追踪到的数据，追踪不到的大概率就是垃圾

v1.3标记清除法：
1.识别可达对象，需要暂停程序，再把栈数据段上的数据对象作为根节点，基于它们进行追踪，将程序的可达对象做标记，没有标记的作为垃圾GC回收

缺点：
1.STW（让程序进行暂停），程序会出现卡顿
2.标记需要扫描整个堆
3.清除数据会出现堆碎片

v1.5三色标记法：（缩短STW时间）
1.统计三个表：白色标记表、灰色标记表、黑色标记表
白色标记表：将所有节点标记为白色
灰色标记表：将所有根节点标记为灰色
黑色标记表：将所有可达对象从白色节点标记为灰色节点，遍历后的灰色节点标记为黑色节点
2.重复步骤1，直到灰色标记表没有任何对象，只有黑色和白色，将白色对象GC回收

三色标记无STW会出现的问题：
1.一个白色对象被黑色对象引用（白色被黑色引用）且一个灰色对象与此白色对象原有的可达关系被破坏（灰色同时丢失了白色），GC回收了有效对象

三色标记无STW会出现的问题的解决：
强三色不变式：
1.强制性不允许黑色对象引用白色对象
弱三色不变式：
1.黑色对象可以引用白色对象，白色对象需要满足：1.白色对象存在其他灰色对象的引用；2.可达链路上游存在灰色对象

只要满足强/弱三色不变式一种，那么就可以保证对象不丢失

屏障机制：（屏障：为了满足强/弱三色不变式增加的额外判断机制，不打扰正常的运行流程）
1.插入写屏障：对象被引用时，触发的机制（不在栈上使用，保证栈的运行速度）
 （具体操作：A对象引用B对象，B对象必须被标记为灰色）
 （满足条件：强三色不变式）
 （不足：结束时需要STW重新扫描栈，需要10~100ms）
2.删除写屏障：对象被删除时，触发的机制
 （具体操作：被删除的对象，如果自身为灰色或者白色，那么会被标记为灰色）
 （满足条件：弱三色不变式）
 （不足：回收精度低，一个对象如果被删除了，最后一个指向它的指针也可以活过这一轮，在下一轮GC中被清理掉）

v1.8三色标记法+混合写屏障机制：
 具体操作：1.GC开始时，将栈上所有对象扫描并标记为黑色（无需重复扫描，无需STW）
          2.GC期间，任何在栈上创建的新对象都为黑色
           3.被删除的对象被标记为灰色
            4.被添加的对象被标记为灰色
 满足对象：变形的弱三色不变式（结合了插入、删除屏障机制的优点）


主体并发增量式回收：
某些阶段使用STW的方式，在其他阶段支持并发的“主体并发式垃圾回收”，在此基础上增加增量式回收

------------------------------------------------------------------------------------------------------------------------
1.golang使用标记清除算法+支持主体并发增量式回收+使用插入/删除混合写屏障机制
2.v1.3标记清除法：识别可达对象，需要暂停程序，再把栈数据段上的数据对象作为根节点，基于它们进行追踪，将程序的可达对象做标记，没有标记的作为垃圾GC回收
  缺点：
      1.STW（让程序进行暂停），程序会出现卡顿
      2.标记需要扫描整个堆
      3.清除数据会出现堆碎片
  v1.5三色标记法：（缩短STW时间）
  1.统计三个表：白色标记表、灰色标记表、黑色标记表
      白色标记表：将所有节点标记为白色
      灰色标记表：将所有根节点标记为灰色
      黑色标记表：将所有可达对象从白色节点标记为灰色节点，遍历后的灰色节点标记为黑色节点
  2.重复步骤1，直到灰色标记表没有任何对象，只有黑色和白色，将白色对象GC回收

  三色标记无STW会出现的问题：
        1.一个白色对象被黑色对象引用（白色被黑色引用）且一个灰色对象与此白色对象原有的可达关系被破坏（灰色同时丢失了白色），GC回收了有效对象

  三色标记无STW会出现的问题的解决：
        强三色不变式：
            1.强制性不允许黑色对象引用白色对象
        弱三色不变式：
            1.黑色对象可以引用白色对象，白色对象需要满足：1.白色对象存在其他灰色对象的引用；2.可达链路上游存在灰色对象
        只要满足强/弱三色不变式一种，那么就可以保证对象不丢失

  v1.8三色标记法+混合写屏障机制（屏障：为了满足强/弱三色不变式增加的额外判断机制，不打扰正常的运行流程）：
  具体操作：1.GC开始时，将栈上所有对象扫描并标记为黑色（无需重复扫描，无需STW）
            2.GC期间，任何在栈上创建的新对象都为黑色
             3.被删除的对象被标记为灰色
              4.被添加的对象被标记为灰色
  满足对象：变形的弱三色不变式（结合了插入、删除屏障机制的优点）

  主体并发增量式回收：
  某些阶段使用STW的方式，在其他阶段支持并发的“主体并发式垃圾回收”，在此基础上增加增量式回收