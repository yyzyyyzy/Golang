悲观锁：（行锁、表锁、读锁、写锁）避免他人篡改、防止并发
假设最坏的情况，每次读取数据的时候都默认其他线程会更改数据，因此需要进行加锁操作，当其他线程想要访问数据时，都需要阻塞挂起。

乐观锁：（CAS 实现、版本号控制）避免数据库幻读、业务处理时间过长
假设数据一般情况不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果冲突，则返回给用户异常信息，让用户决定如何去做。
乐观锁适用于读多写少的场景，这样可以提高程序的吞吐量。

1.全局锁：就是对整个数据库实例加锁，
可以通过flush table with read lock(ftwrl)实现加全局锁。加锁后，其他线程的ddl,dml操作将被阻塞。
全局锁最典型的使用场景是全库逻辑备份。

设置全局锁风险：
如果在主库上设置，则加锁期间所有dml,ddl操作均不能执行，业务处于停滞状态
如果在从库上设置，则加锁期间同步过来的binlog均不能apply,复制延迟不断增大

2.表级锁：表锁和元数据锁（MDL）
表锁
表锁的语法是lock tables read/write。
可以用unlock tables解锁也可以在客户端断开时自动释放锁。
需要注意的是lock tables语法除了限制别的线程读写外，也限制了本线程接下来的操作。

元数据锁
MDL锁不需要显式的使用，在访问一个表的时候会自动加上。
MDL锁的作用是防止DDL和DML并发的冲突，保证读写的正确性。防止正在读写某张表时，表结构被另一个线程变更。
当对表进行增删改查操作时，加MDL读锁。当对表进行表结构变更操作时，加MDL写锁。
读锁之间不互斥，可以多个线程同时对一张表增删改查。
读写锁之间，写锁之间互斥，用来保证变更表结构操作的安全性。

3.意向锁
为了支持行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的意向锁（Intention Locks），
这两种意向锁都是表锁。（可以简单理解为支持并发DDL和DML互不冲突）

意向共享锁（IS）
事务打算给数据行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。
意向排他锁（IX）
事务打算给数据行加排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。

行锁
行锁应用于innodb存储引擎，行锁主要分为共享锁（S，读锁）和排他锁（X，写锁）。
行锁阻塞一行记录的更新操作，开销大，加锁慢，会出现死锁，并发度高，发生锁冲突概率最低

共享锁
当一个事务对某行或某些行加了共享锁，在该事务结束期间，其他事务对其只能进行读操作，不能进行写操作。
用法：SELECT `id` FROM  table WHERE　id in(1,2) LOCK IN SHARE MODE

排他锁
当一个事务对某行或某些行加了排他锁，在该事务结束期间，其他事务不能对其加任何锁。
用法：SELECT `id` FROM mk_user WHERE id=1 FOR UPDATE

