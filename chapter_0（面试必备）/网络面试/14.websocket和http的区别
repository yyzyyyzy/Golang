### 1. **WebSocket与HTTP的区别**

**WebSocket**和**HTTP**都是基于TCP的应用层协议，但它们的设计目标和通信模式有很大不同：

- **连接方式**：
  - HTTP是一种**短连接**协议，通常是一次请求一次响应，之后连接会关闭。如果需要持续通信，客户端需要不断发起新的请求（如轮询）。
  - WebSocket是一种**长连接**协议，客户端和服务器只需要建立一次连接，之后可以双向实时通信，避免了频繁建立和关闭连接的开销。

- **通信模式**：
  - HTTP是**单向通信**，客户端发起请求，服务器返回响应，服务器不能主动向客户端发送数据。
  - WebSocket是**双向通信**，客户端和服务器可以随时主动发送数据，适合实时性要求高的场景（如聊天、实时游戏等）。

- **数据格式**：
  - HTTP通常使用文本格式（如JSON、XML）传输数据，头部信息较大，适合传输结构化数据。
  - WebSocket使用二进制帧传输数据，头部开销小，适合传输低延迟的实时数据。

- **应用场景**：
  - HTTP适用于传统的Web应用，如页面加载、API调用等。
  - WebSocket适用于实时性要求高的场景，如在线聊天、股票行情推送、在线游戏等。

---

### 2. **WebSocket与Socket的区别**

**WebSocket**和**Socket**是两个不同层次的概念：

- **Socket**：
  - Socket是操作系统提供的**网络编程接口**，位于传输层（如TCP/IP），用于实现网络通信。
  - Socket是底层技术，开发者需要手动处理连接、数据传输、错误处理等细节。
  - Socket可以用于实现任何基于TCP或UDP的协议，灵活性高，但开发复杂度也较高。

- **WebSocket**：
  - WebSocket是一种**应用层协议**，基于TCP实现，位于Socket之上。
  - WebSocket提供了更高层次的抽象，开发者只需关注业务逻辑，无需处理底层通信细节。
  - WebSocket是专门为Web应用设计的，支持浏览器和服务器之间的双向实时通信。

- **应用场景**：
  - Socket适用于需要自定义协议或高性能通信的场景，如开发自定义的服务器、网络工具等。
  - WebSocket适用于Web应用中的实时通信场景，如聊天、实时数据推送等。

---

### 总结

- **WebSocket vs HTTP**：WebSocket是双向实时通信协议，适合实时性要求高的场景；HTTP是单向请求-响应协议，适合传统Web应用。
- **WebSocket vs Socket**：WebSocket是应用层协议，基于Socket实现，提供更高层次的抽象，适合Web开发；Socket是底层网络编程接口，灵活但开发复杂度高。