CSRF攻击的原理:
        ①用户正常登录A银行网站,

        ②A网站返回cookie信息给用户,浏览器保存cookie信息

        ③在A网站没有退出登录的情况下(或者说cookie信息没过期), 登录了恶意网站B

        ④恶意网站B,提前准备好转账表单或者其它请求 ,将其隐藏. 把提交到A网站的按钮设置为一个"领取优惠券"的图片链接.用户 点击链接

        ⑤在用户主观未知的情况下,访问A网站,此时浏览器会自动携带cookie信息

        ⑥A网站识别到cookie信息,默认为是用户本人做出的请求,根据请求做出相应的操作.

        ⑦用户收到损失.

具体防御流程：
1.后端生成 csrf_token 的值，在前端请求登录或者注册界面的时候将值传给前端，传给前端的方式可能有以下两种：
在模板中的 From 表单中添加隐藏字段
将 csrf_token 使用 cookie 的方式传给前端
2.在前端发起请求时，在表单或者在请求头中带上指定的 csrf_token
3.后端在接受到请求之后，取到前端发送过来的 csrf_token，与第1步生成的 csrf_token 的值进行校验
4.如果校验对 csrf_token 一致，则代表是正常的请求，否则可能是伪造请求，不予通过

而在 Flask 中，CSRFProtect 这个类专门只对指定 app 进行 csrf_token 校验操作，
所以开发者需要做以下几件事情：
1.生成 csrf_token 的值
2.将 csrf_token 的值传给前端浏览器
3.在前端请求时带上 csrf_token 值