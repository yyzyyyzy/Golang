1.string
2.hash
3.list
4.set
5.zset


List数据结构是链表结构，是双向的，可以在链表左，右两边分别操作；
也可以把list看成一种队列，所以在很多时候可以用redis用作消息队列
应用案例有时间轴数据，评论列表，消息传递等等，它可以提供简便的分页，读写操作。

string类型的数据存储是最简单的key-value存储；

zset
zset的两种实现方式
    ziplist：满足以下两个条件的时候
        元素数量少于128的时候
        每个元素的长度小于64字节
    skiplist：不满足上述两个条件就会使用跳表，具体来说是组合了map和skiplist
        map用来存储member到score的映射，这样就可以在O(1)时间内找到member对应的分数
        skiplist按从小到大的顺序存储分数，链表形式
        skiplist每个元素的值都是[score,value]对

zset 要支持随机的插入和删除，所以它不宜使用数组来实现
性能考虑： 在高并发的情况下，树形结构需要执行一些类似于 rebalance 这样的可能涉及整棵树的操作，相对来说跳跃表的变化只涉及局部 (下面详细说)；
实现考虑： 在复杂度与红黑树相同的情况下，跳跃表实现起来更简单，看起来也更加直观；
基于以上的一些考虑，Redis 基于 William Pugh 的论文做出一些改进后采用了 跳跃表 这样的结构，本质是解决查找问题

什么是跳表？
跳跃表是一种有序的数据结构，它通过在每个节点中维持多个指向其他的几点指针，从而达到快速访问队尾目的。
跳跃表的效率可以和平衡树想媲美了，最关键是它的实现相对于平衡树来说，代码的实现上简单很多。

跳跃表的 level 是如何定义的？
对于每一个新插入的节点，都需要调用一个随机算法给它分配一个合理的层数
level 层级完全是随机的。一般来说，层级越多，访问节点的速度越快。