### **完整示例回答**
> 我参与过一个高并发的HTTP服务项目，使用Go语言开发。在上线后，我们发现服务的内存占用持续增长，响应时间也逐渐变慢，最终触发了OOM（Out of Memory）导致服务崩溃。  
> 首先，我使用Go的`pprof`工具对服务进行了性能分析。通过Heap Profile，我发现内存中有大量的`http.Transport`对象和`time.Timer`对象。进一步分析代码，我发现以下两个问题：  
> 1. **`http.Transport`被频繁创建**：每次发起HTTP请求时，都会创建一个新的`http.Transport`对象，导致连接池无法复用，大量TCP连接未被正确关闭。  
> 2. **`for`循环中大量使用`time.After`**：在某个核心逻辑中，`for`循环内频繁调用`time.After`创建定时器，导致大量的`time.Timer`对象堆积，无法及时释放。  
> 针对`http.Transport`被频繁创建的问题，我将其改为全局单例模式，确保所有HTTP请求复用同一个`http.Transport`对象。这样可以复用连接池，避免频繁创建和销毁TCP连接。  
> 对于`time.After`的问题，我将`time.After`移出`for`循环，改用`time.Ticker`来管理定时任务。这样可以避免在每次循环中创建新的定时器对象，减少内存占用和GC压力。  
> 经过优化后，服务的内存占用从2GB降低到了500MB左右，响应时间从平均200ms降低到了50ms以内。同时，TCP连接的复用率显著提高，连接池的使用效率也得到了优化。后续监控显示，问题没有再复现。  
> 通过这次性能调优，我深入理解了`http.Transport`的连接池机制以及`time.After`和`time.Ticker`的性能差异。这让我在后续开发中更加注重资源的复用和定时器的合理使用，避免类似问题再次发生。
