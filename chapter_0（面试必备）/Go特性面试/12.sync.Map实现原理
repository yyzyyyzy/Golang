在map内数据非常大的时候，采用一个大锁，会使得锁的竞争十分激烈，存在性能问题，go采取读写分离的方案，实现了一个并发安全的sync.Map

sync.Map的原理:
1.使用了空间换时间策略，通过冗余的两个数据结构(read、dirty),实现加锁对性能的影响。
2.通过引入两个map将读写分离到不同的map，其中read map提供并发读和已存元素原子写，而dirty map则负责读写。
3.这样read map就可以在不加锁的情况下进行并发读取,当read map中没有读取到值时,再加锁进行后续读取,并累加未命中数。
4.当未命中数大于等于dirty map长度,将dirty map上升为read map。
5.从结构体的定义可以发现，虽然引入了两个map，但是底层数据存储的是指针，指向的是同一份值。