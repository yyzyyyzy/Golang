1.首先，用户要能够输入用户名和密码，所以需要网页和表单，用以实现用户输入和提交的过程。
用户提交了用户名和密码，我们就需要比对用户名，密码是否正确，
而要想比对，首先我们的系统中就要有存储用户名，密码的地方，
大多数后台系统会通过数据库来存储，但是实际上我们也可以简单的存储到文件当中。

2.登录之后，我们需要维持用户登录状态，以便用户在访问特定网页的时候来判断用户是否已经登录，
以及是否有权限访问改网页。这就需要有维护一个会话来保存用户的登录状态和用户信息。

3.从第三步我们也可以看出，如果我们的网页需要权限保护，
那么当请求到来的时候，我们就首先要检查用户的信息，比如是否已经登录，是否有权限等，
如果检查通过，那么在response的时候就会将相应网页回复给请求的用户，但是如果检查不通过，那么就需要返回错误信息。

4.在第二步，我们知道要将用户名和密码存储起来，但是如果只是简单的用明文存储用户名和密码，
很容易被“有心人”盗取，从而造成用户信息泄露，那么我们实际上应当将用户信息尤其是密码做加密处理之后再存储比较安全。

5.用户登出

###登陆和验证的合理思路：

前端首先判断本地存储，cookie(web)或者localStorage(app)，
获取user_token，如果这个值不存在，就跳转到登录页。
用户在登录页，输入用户名密码之类信息，请求后端登录接口，验证通过以后，后端接口会返回一个合法的token给前端，
前端作为user_token这个值写入本地存储，下次请求就可以读取到这个值，就是记录了已经登录的状态。
之后每次请求，前端都需要带上这个token值，后端接口就知道这个请求来自哪个已经登录的用户了。

后端对token的验证有很多种方式：1. 直接用token值判断，最简单也最不安全，
这里的token值就类似原来web形态下的session_id的概念。2. 前端传递user_id，再利用token和传递的参数，
用特定的hash算法，算出一个hash码，一起传递。这样因为参数不同，每次得到的hash码都是不同的。
后端可以根据user_id，得到传递给用户的约定的token，再根据接收的参数和一样的hash算法，可以得到一个后端的hash码，
如果和前端传递的hash码匹配，即验证通过。这种方式安全性略有提升。
3. 后端预先给用户分配了token和key两层，验证方式同上面2号方案，但是hash算法中使用了token和key两个字串。
这个方式有两串随机码，反解难度最高，安全性最好。token还有超时概念，超时就失效。
一套规范的token(+key)分配机制，验证算法，超时机制，显然是可以通用的，
就有人把整体方案封装为oauth的方式，作为规范提供，各种语言也基于这个规范，实现了自己的各种类库，
现在一般直接选用一个就可以了。
