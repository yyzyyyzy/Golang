动态资源：flask、Django框架的后端代码
静态资源：html，javascript，css,images等文件
分离：分开部署

为什么需要nginx做动静分离：
tomcat服务器处理静态资源效率低，nginx处理静态资源效率高，处理高并发效率也很高，
所以用nginx分担tomcat服务器的访问压力
1.降低动态资源和静态资源的耦合度，提高访问速度
2.动态资源宕机不显示，也不影响前端页面静态资源的展示，用户体验好

nginx如何实现动静分离：
静态资源部署到nginx，通过配置文件配置静态资源的访问地址
动态资源部署到tomcat，通过nginx的反向代理proxy_pass把对后端代码的请求分发到服务端


为什么需要动静分离：
在我们的软件开发中，有些请求是需要后台处理的（如：.jsp,.do 等等），
有些请求是不需要经过后台处理的（如：css、html、jpg、js 等等文件），
这些不需要经过后台处理的文件称为静态文件，否则动态文件。

因此我们后台处理忽略静态文件。这会有人又说那我后台忽略静态文件不就完了吗？
当然这是可以的，但是这样后台的请求次数就明显增多了。
在我们对资源的响应速度有要求的时候，我们应该使用这种动静分离的策略去解决动、静分离将网站静态资源
（HTML，JavaScript，CSS，img等文件）与后台应用分开部署，
提高用户访问静态代码的速度，降低对后台应用访问

这里我们将静态资源放到 Nginx 中，动态资源转发到 Tomcat 服务器中去。

当然，因为现在七牛、阿里云等 CDN 服务已经很成熟，主流的做法，是把静态资源缓存到 CDN 服务中，从而提升访问速度。

相比本地的 Nginx 来说，CDN 服务器由于在国内有更多的节点，可以实现用户的就近访问。
并且，CDN 服务可以提供更大的带宽，不像我们自己的应用服务，提供的带宽是有限的。
