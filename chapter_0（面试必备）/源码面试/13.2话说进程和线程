①线程的执行：
每个进程都有自己的虚拟内存地址空间，但是为了保障系统的运行安全，虚拟地址空间被划分为用户空间和内核空间
操作系统运行在内核空间，用户程序运行在用户空间
内核空间由所有进程的地址空间共享，但是用户程序不能直接访问内核空间
操作系统保存的进程控制信息（PCB）在内核空间，除了页目录还可以找到父进程ID、状态、打开文件的句柄表等
线程是进程的执行体，需要有指定的执行入口，通常为某个函数的指令入口，
线程执行时需要从进程虚拟地址空间中分配的栈空间来存储数据，也称为线程栈，
创建线程时，操作系统会在用户空间和内核空间分别分配两段栈（用户栈和内核栈）
线程切换到内核态执行时使用内核栈，为了不允许用户代码对内核栈进行修改保证其安全
操作系统也会记录每条线程的控制信息（执行入口、线程栈、线程ID等）
在windows中线程控制信息对应TCB，在进程控制信息（PCB）中可以找到进程拥有的线程列表，
同一个进程内的线程会共享进程的地址空间、句柄表等资源。
在Linux中只用了一个task_struct结构体，进程在创建子进程时会指定进程和子进程使用同一套地址空间和句柄表等资源，实现多线程的效果

比如执行进程A中的线程a1，执行入口在用户空间的代码段，CPU的指令指针指向线程的执行入口（当前执行用户空间的程序指令）
所以栈基和栈指针寄存器会记录用户栈的位置，可以看出程序执行时，CPU面向的是a1线程，所以线程是进程的调度与执行的基本单位

一个进程至少有一个线程，这个进程需要从这个线程开始执行，这就是进程的主线程（进程的第一个线程：由父进程/操作系统创建）
进程中其他线程是由这个主线程创建的
线程中发生函数调用时，会在这个线程栈中分配函数调用栈，而虚拟内存分配、文件操作、网络读写等功能是由操作系统实现，
再向用户暴露程序接口API，所以线程需要调用操作系统提供的系统服务（系统调用）
CPU中会有特权级标志，用于记录程序执行在内核态还是用户态，只有内核态才能访问内核空间；

线程a1在用户态，不能访问内核空间，所以系统调用时需要切换为内核态，使用线程的内核栈，执行内核空间的系统函数
系统调用最初是软中断（通过指令模拟中断）触发的，操作系统会按CPU硬件要求，在内存中存储一张中断向量表（中断编号、处理程序），
将中断编号映射到相应的处理程序，操作系统实现了一张系统调用表（系统调用编号、函数入口）系统调用派发；
所以用户程序会把需要调用的系统函数编号存入特定寄存器，通过寄存器或者用户栈传递其他所需要的参数；
然后用int 0x80触发系统调用中断；
硬件层面：CPU有一个中断控制器，负责接收中断信号，切换到内核态，保存用户态执行现场；
一部分寄存器的值会通过硬件机制保存，还有一部分通用寄存器的值会被压入内核栈中；
然后去中断向量表查询0x80对应的系统派发程序入口，
而系统调用的派发程序会根据指定的系统调用编号去系统调用表内查询对应的系统调用入口并执行；
为了优化系统调用的性能，改为通过特殊指令触发系统调用，例如x86的sysenter和amd64平台下的syscall，
当CPU执行到这些指令时，会陷入内核态，从专用寄存器拿到派发入口地址，省去了查询中断向量表的过程，
等系统调用结束后，再利用之前保存的信息，恢复用户在用户态的执行现场，继续执行后面的指令，这样完成了一次系统调用

②线程切换：（时间片轮转）
CPU的执行权被划分为不同的时间片，只有获得时间片的程序才能够运行，
时间片很短，用户感受不到程序的切换过程，而且CPU很快，很短的时间片也足够执行很多很多的指令
一个线程获得的时间片时间用完时，CPU硬件时钟会触发一次时钟中断，对应的中断处理程序，会从已经就绪的线程中挑选一个执行，

比如此时需要从线程a1切换到线程a2（同属于进程A），只需要把线程a1的执行线程保存，
后续再把指令指针、栈指针这些寄存器的值修改为线程a2的信息，再修改内存中调度相关的数据结构，一次进程间线程切换的流程就执行完毕
等到线程a1再次获得时间片时，根据之前保存的信息恢复到切换前的执行现场继续完成任务

假设需要从进程A的线程a1切换到进程B的线程b1，除了线程切换以外，还要切换进程，CPU保存的页目录地址要切换到进程B
所以进程切换与线程切换的区别就是：进程切换会导致地址空间等进程资源发生变化，导致TLB缓存失效，代价相对较大

------------------------------------------------------------------------------------------------------------------------
进程：
    进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有一个自己的地址空间，
    至少有 5 种基本状态，它们是：初始态，执行态，等待状态，就绪状态，终止状态。

线程：
    线程是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。

进程和线程的联系：
    线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。

进程和线程的区别：
    根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位

    1.在开销方面：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；
      线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。

    2.所处环境：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）

    3.内存分配方面：系统在运行的时候会为每个进程分配不同的内存空间；
      而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。

    4.包含关系：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；
      线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。