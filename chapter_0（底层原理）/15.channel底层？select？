ch = make(chan int, 5)

ch是存在于函数栈帧上的一个指针，指向堆上的hchan数据结构:
    type hchan struct {
        qcount   uint           // 已经存储了几个元素
        dataqsiz uint           // 缓冲区最多存储多少元素
        buf      unsafe.Pointer // 指向缓冲区的指针地址
        elemsize uint16         // 每个元素占多大空间
        closed   uint32         // 记录关闭的状态
        elemtype *_type // 指向元素类型的元数据
        sendx    uint   // 读下标的位置
        recvx    uint   // 写下标的位置
        recvq    waitq  // 发送队列（写）
        sendq    waitq  // 接收队列（读），sudog链表
        lock     mutex  //互斥锁
    }
1.由于channel需要在协程间并发访问，所以需要mutex lock互斥锁保护数据结构
2.对于有缓冲的channel来说，需要知道buf（缓冲区的指针地址），qcount（已经存储了多少个元素），
                            dataqsiz（最多存储多少个元素），elemsize（每个元素占多大空间）

3.所以缓冲区就是一个数组，golang运行时，内存复制，垃圾回收等机制依赖数据的类型信息，所以hchan有一个elemtype指针（指向元素类型的元数据）
4.channel支持交替读（接收）写（发送），需要记录读、写下标的位置，当读写不能立即完成时，需要让当前协程在channel上等待，要能立刻唤醒等待的协程
5.channel能够close，需要用close记录关闭状态

ch = make(chan int, 5)
go func1 () {
    ch <- 1
    ch <- 2
    ch <- 3
    ch <- 4
    ch <- 5
    ch <- 6
}

go func2() {
    <- ch
}


1.ch缓冲区容量为5，内容为空，读写下标sendx、recvx指向下标为0的位置，等待队列sendq、recvq也为空。
2.协程g1向ch发送数据，5个数字放入缓冲区，sendx重新回到下标为0的位置，数据6无处可放，
  g1进入发送等待队列sendq中（sudog类型的链表，记录哪个协程在等待，等待哪个channel，等待发送的数据在哪儿....）
3.协程g2从ch接收一个元素，recvx指向下标为1的位置，第0个位置可以存储数据6，会唤醒sendq的g1协程，将数据发送给ch，缓冲区又满了

由于sendx和recvx都会从0到4再到0，所以channel的缓冲区是环形缓冲区。

发送数据的写法：
阻塞式channel：
ch <- 10

非阻塞式channel：
select {
case ch <- 10:
 ...
default:
 ...
}

接收数据的写法：
阻塞式channel：
<-ch（丢弃结果）
v := <-ch（结果赋值给变量v）
v, ok := <-ch（ok为false，ch关闭）

非阻塞式：
select {
case <-ch:
 ...
default:
 ...
}




