①map的存储原理（数据结构）：map的数据结构最主要的由哈希表和搜索树组成，自平衡搜索树法的最差搜索效率是 O(logN)，而哈希查找表最差是 O(N)
1.哈希查找表
创建map构造键值对（key, value）
    ==> 通过hash函数计算key的哈希值
        ==> 方法一、取模法：根据得到的哈希值与桶的个数[0,m-1]取模(除法取余)（hash % m = ?）得到桶的编号存储
            方法二、与运算法：与运算使用哈希值与桶的编号(m-1)进行二进制的与运算从而判断空桶和可以存放的桶的编号
            ==> 如果键值对存储桶的位置重复（哈希冲突），解决方法有两种： 一、拉链法：以链表形式存储在重复的索引位置后面
                                                              二、开放寻址法：直接在重复桶的后一个编号存储键值对（python）

2.搜索树
红黑树，AVL树

红黑树：（平衡二叉树）
根节点为黑色，子节点为红色
通过子节点的自动旋转和调整，让二叉树始终保持基本平衡的状态，保持二叉树的查找效率
缺点：一直插入比父节点大/小的左/右子树，此时红黑树会右倾/左倾，查找效率退化

AVL树：（完全平衡二叉树）
它是一棵空树或它的左右两个子树的高度差的绝对值不超过1（-1，0，1），并且左右两个子树都是一棵平衡二叉树。
效率比红黑树更高
缺点：每个树节点只存储一个数据，需要大量进行IO的读写，耗时

②hmap和bmap（桶）详解
1.map主要是由hmap和bmap两个结构体实现，hmap结构体的buckets是一个指针最终指向bmap结构体
2.bmap就是桶，可以存放8个键值对（经过哈希计算后，哈希结果是“一类”的），再由key计算出来的哈希值的高8位（tophash）确定键值对放在桶的什么位置
3.每个bucket只能存储8个键值对，溢出则再构建一个bucket，通过bmap的参数overflow指针连接起来

hmap结构体源码：
type hmap struct {
	count     int //记录键值对个数
	flags     uint8
	B         uint8 //记录桶的个数为2^B（每个桶可以存8个键值对）
	noverflow uint16 //使用的溢出桶数目
	hash0     uint32 //哈希因子，计算 key 的哈希的时候会传入哈希函数

	buckets    unsafe.Pointer //buckets指针指向bmap（桶）的地址
	oldbuckets unsafe.Pointer //用来保存旧桶的位置
	nevacuate  uintptr //用来记录下一个迁移的旧桶编号

	extra *mapextra // 指向mapextra结构体
}

buckets指针指向bmap结构体：
type bmap struct {
    topbits  [8]uint8
    keys     [8]keytype
    values   [8]valuetype
    pad      uintptr
    overflow uintptr    
}

bmap的overflow指针指向mapextra结构体：
type mapextra struct {
	overflow    *[]*bmap //slice结构 记录已被使用的溢出桶地址
	oldoverflow *[]*bmap //存储旧桶用到的溢出桶的地址
	nextOverflow *bmap //指向下一个空闲溢出桶地址
}

map扩容机制：（负载因子=键值对个数count / 桶个数2^B = 6.5）
1.负载因子超过阈值6.5会翻倍扩容（创建旧桶数目两倍的新桶）
2.如果常规桶数目小于等于2^15，溢出桶大于常规桶就会等量扩容（创建与旧桶数目相同的新桶）
  如果常规桶数目大于2^15，溢出桶一旦超过常规桶就会等量扩容（创建与旧桶数目相同的新桶）
3.再把原来旧桶的键值对迁移到新桶

等量扩容的目的：
1.删除了键值对的值，使得旧桶的排列零散，此时迁移到新桶可以整理原键值对的排列，减少溢出桶的使用

ps: 1.溢出桶和常规桶的内存是连续的，前2^B桶作为常规桶，其余作为溢出桶
    2.触发扩容后旧桶的key-value需要迁移到新桶，由于桶的数量是2^B，所以一定能保证key和value迁移后也能分开存放



