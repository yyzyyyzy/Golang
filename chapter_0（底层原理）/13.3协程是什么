线程也需要记录标识符、栈执行位置、执行入口、执行现场等
线程可以选择一个执行体（协程）来执行，此时CPU中的执行指针便会指向这个执行体的执行入口，栈基和栈指针寄存器也会指向线程分配的执行栈
切换执行体时，需要先保存当前执行体的执行现场然后切换到另一个执行体，
通过相同的方式，也可以恢复到之前的执行体，可以从上次中断的地方继续执行。

这些由线程创建的执行体就是协程！
因为用户程序不可以操作内核空间，所以只能给协程分配用户栈，而操作系统对协程一无所知，所以协程又称为“用户态线程”

协程都需要指定执行入口，底层都会分配协程执行栈和控制信息，才能负责用户态的调度；
让出协程的执行权时，也要保存执行现场，才能从中断处恢复执行；

所以协程的中心思想是控制流的主动让出和恢复，每个协程都有自己的执行栈，可以保存自己的执行现场，可以由用户程序按需创建协程；
协程主动让出执行权时，保存此时的执行现场，然后切换到其他协程；
协程恢复执行权时，会根据之前保存的执行现场恢复到中断前的状态，继续执行。
这样就实现了轻量灵活的，由用户态调度的多任务模型。

解决了高并发场景下，多进程模型内存资源吃紧，内核态和用户态两头忙，却依然疲于应对的情况。