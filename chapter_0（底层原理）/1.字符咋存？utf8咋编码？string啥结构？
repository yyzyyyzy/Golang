1.整数通过转成二进制存储,一个字节=8个bit, 一个字节可以存储0-255个数字，两个字节可以存储0-65535个数字，更多的字节可以有更多的组合
2.通过给字符编号转成二进制字符集存储，ASCII码只存储了128个字符，没有汉字，而unicode制作了一个全球语言的通用字符集
3.go语言使用默认的utf-8编码划分字符边界（字符集配合编码模板）
4.字符串末尾C语言加入了\0标识符用来找字符串的开头和结尾，缺点就是不能在字符中使用\0
5.而golang在字符串起始地址之后存了字节的个数，缺点是golang将字符串分配到数据段的只读内存段，不能对字符串只读内容进行修改
6.字符串分为两部分存储（字符串内容（指针）|字节个数（长度）），如果要修改，需要将字符串重新赋值，这样不会修改原来分配的内存值
7.也可以将变量强制类型转换为slice，内存为slice重新分配空间，拷贝原字符串


package main

import "fmt"

func main() {
	str := "李子康caonima"
	fmt.Printf("%c\n", str[9]) //可以读取到第9个字符，但是不能做修改字符的操作，例如（str[9] = 'a'）
}


ps : 字符串 = 字符串内容（指针） + 字节个数（长度），字符串在64位机器占16字节（指针占8字节，长度8字节）



1.字符串可以修改吗？
不可以，golang字符串分为两部分存储（字符串内容（指针）|字节个数（长度）），将字符串分配到数据段的只读内存段，不能对字符串只读内容进行修改
    1.如果要修改，需要将字符串重新赋值，这样不会修改原来分配的内存值
    2.也可以将变量强制类型转换为slice，内存为slice重新分配空间，拷贝原字符串