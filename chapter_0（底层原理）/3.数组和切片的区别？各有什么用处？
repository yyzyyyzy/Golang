1.数组数组是定长的，长度定义好之后，不能再更改，是一片连续的内存地址
2.slice 是对数组的封装，用来描述数组的一个片段，实际上是一个结构体，包含三个字段，底层数组、长度、容量：
    type slice struct {
        array unsafe.Pointer // 元素指针
        len   int // 长度
        cap   int // 容量

3.数组作为函数传递时需要定长 func main(array [10]int) {}
  切片作为函数传递时不需要定长 func main(slice []int) {}

4.数组和切片大部分都是创建在堆区，栈区负责参数、返回值传递
5.数组作为函数参数传递是值传递，形参（main函数栈帧）和实参（被调用函数栈帧）是不同的地址，形参不能改变实参；
  切片作为函数参数传递是引用传递（传递切片名），切片地址作为实参传给形参（被调用函数栈帧），形参可以改变实参。


func swap(a ,b int) {
    a ,b = b ,a
}

func main() {
    a := 10
    b := 20
    swap(a, b)

    fmt.Println(a, b) //值传递形参不会影响到实参
}

特殊情况: 当原切片的容量不够存储append新增加的元素，那么会在堆区新开辟内存空间并拷贝元素，被调用函数的参数栈帧指向堆区新的内存地址；
         此时形参的改变会影响到实参



